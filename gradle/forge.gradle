repositories {
    maven {
        // location of a maven mirror for JEI files
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../NeoForge/repo/"
    }
    maven {
        name = "Maxanier"
        url = "https://maven.maxanier.de/releases"
        content {
            includeGroupAndSubgroups "de.teamlapen"
            includeGroupAndSubgroups "de.maxanier"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Forge"
        url = "https://maven.minecraftforge.net"
    }

    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${forge_version}"

    //Don't export dependencies to pom as their deobfuscated version would be used which cannot be found in dependent projects
    if (include_jei.toBoolean()) {
        compileOnly "mezz.jei:jei-${jei_mc_version}-common-api:${project.jei_version}" //API for compile
        compileOnly "mezz.jei:jei-${jei_mc_version}-neoforge-api:${project.jei_version}" //API for compile
        runtimeOnly "mezz.jei:jei-${jei_mc_version}-neoforge:${project.jei_version}" //Full for runtime
    }

    if (include_guideapi.toBoolean()) {
        compileOnly "de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}"
        runtimeOnly "de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}"
    }

    if (include_terrablender.toBoolean()) {
        compileOnly "com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}"
        runtimeOnly "com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}"
    }

    if (include_jade.toBoolean()) {
        runtimeOnly "curse.maven:jade-324717:" + project.jade_version
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'warn'

        modSources  project.sourceSets.api, project.sourceSets.lib, project.sourceSets.main
    }
    client {
        systemProperty 'vampirism_target', 'dev'
        systemProperty 'guideapi_target', 'dev'
        jvmArgument '-XX:+AllowEnhancedClassRedefinition'
        jvmArgument '-XX:+IgnoreUnrecognizedVMOptions'
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        systemProperty 'mixin.debug.export', 'true'
    }

    server {
        systemProperty 'vampirism_target', 'dev'
        jvmArgument '-XX:+AllowEnhancedClassRedefinition'
        jvmArgument '-XX:+IgnoreUnrecognizedVMOptions'
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'vampirism_target', 'dev'
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        systemProperty 'vampirism_target', 'dev_data'
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }

    create("client2") {
        configure(runs.client)
        arguments '--username', 'Dev2'
        workingDirectory "runs/client2"
    }
}

subsystems {
    parchment {
        minecraftVersion = project.parchment_minecraft_version
        mappingsVersion = project.parchment_mappings_version
    }
}