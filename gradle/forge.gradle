repositories {
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { url 'http://tehnut.info/maven/' }
    maven { url 'http://chickenbones.net/maven' }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../MinecraftForge/repo/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name 'shinoow'
        url 'https://dl.bintray.com/shinoow/maven/'
    }
    mavenCentral()
}


dependencies {
    minecraft([
            group: "net.minecraftforge",
            name: "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])
    //ompileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${project.jei_version}:api") //API for compile //TODO waiting for jei 1.14.4
    //runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${project.jei_version}") //Full for runtime
    
    //deobfCompile 'mcp.mobius.waila:Waila:' + config.waila_version
    //deobfCompile 'Waila:Waila:1.7.1_1.11.2' //Backup Waila on curseforge
    //deobf 'info.amerifrance.guideapi:Guide-API:${guide_api_version}'


}

minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()
    accessTransformer = file('src/main/resources/META-INF/vampirism_at.cfg')

    runs {
        client = {
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            workingDirectory project.file('run').canonicalPath

            mods {
                teamlapenlib {
                    source sourceSets.lib
                }
                vampirism {
                    source sourceSets.main
                    source sourceSets.api
                }


            }

        }
        server = {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
            source sourceSets.lib
            source sourceSets.api
        }
    }

}

processResources {

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version, 'mcversion': minecraft_version, 'forge_version': forge_version
    }



    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }



    exclude '**/Thumbs.db'
}

processLibResources {
    from(sourceSets.lib.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version, 'mcversion': minecraft_version, 'forge_version': forge_version
    }
    from(sourceSets.lib.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}




jar {
    //Keep the jar as clean as possible
    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.lib.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir
    from sourceSets.lib.output.resourcesDir
    
    from{
        fileTree('build/translations').matching{
            exclude "**/en_US.lang"
        }
    }



    manifest {
        attributes([
                "FMLAT": "vampirism_at.cfg",
                "Specification-Title": "vampirism",
                "Specification-Vendor": "maxanier",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"maxanier",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}
