repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { url 'http://tehnut.info/maven/' }
    maven { url 'http://chickenbones.net/maven' }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../te/MinecraftForge/repo/"
    }
    mavenCentral()
}

task crowdin(type: CrowdinDownload) {
    outputs.upToDateWhen { false }
    output = "build/crowdin.zip"
    projectId = 'vampirism'
    extract = false // we wanna keep it as a zip. not extract it to a folder named "crowdin.zip"

    // task auomatically skips if this is null
    if (project.hasProperty('CROWDIN_KEY'))
        apiKey = project.CROWDIN_KEY
}


dependencies {
    deobfProvided "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version + ":api"
    deobfProvided 'mcp.mobius.waila:Waila:' + config.waila_version
    deobfProvided 'info.amerifrance.guideapi:Guide-API:' + config.guide_api_version
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    mappings = config.mappings
    runDir = "run"
    replaceIn "util/REFERENCE.java"
    replace "@VERSION@", "${project.mod_version}"
    replace "@MVERSION@", "${config.minecraft_version}"
    replace "@FVERSION@", "${config.forge_version}"
    makeObfSourceJar = false // an Srg named sources jar is made if enabled
    useDepAts = true
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "m_version", project.mod_version
    inputs.property "mc_version", project.config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '*.info', "*.mcmeta", "META_INF/**"
        // replace version and mcversion
        expand 'm_version': project.mod_version, 'mc_version': project.config.minecraft_version
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }

    exclude '**/Thumbs.db'
}

jar {
    //Keep the jar as clean as possible
    includeEmptyDirs = false


    dependsOn 'crowdin'
    def translations = zipTree(crowdin.output).matching {
        exclude "**/en_US.lang"
    }
    from { crowdin.getDidWork() ? translations : null }



    manifest {
        //attributes 'FMLCorePlugin': 'de.teamlapen.vampirism.coremod.VampirismFMLLoadingPlugin',
        //        'FMLCorePluginContainsFMLMod': 'true'
    }

}