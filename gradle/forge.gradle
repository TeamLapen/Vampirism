repositories {

    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.dev/"
//    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../MinecraftForge/repo/"
    }
    maven {
        url = "https://maxanier.de/maven2"
    }
    maven {
        url "https://nexus.resourcefulbees.com/repository/maven-public/"
    }
    repositories {
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
    //3rd party library repos
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenCentral()
    mavenLocal()
}


dependencies {
    minecraft([
            group: "net.minecraftforge",
            name: "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])
    //Don't export dependencies to pom as their deobfuscated version would be used which cannot be found in dependent projects
    compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}:api") //API for compile
    runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}") //Full for runtime
    compileOnly fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}") //For compile (not exported to POM)
    runtimeOnly fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}") //For runtime (not exported to POM)
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
    //Blame for debugging
    runtimeOnly fg.deobf("com.telepathicgrunt:Blame:${project.blame_version}")

    //Common dependencies for temporary test mods
//    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.3")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.2")
//    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-1.16.5:3.0.57")

    //Mod compat tests - Temporary
//  runtimeOnly fg.deobf("curse.maven:epic-fight-mod-405076:3534866")
//  runtimeOnly fg.deobf("curse.maven:angel-of-vengeance:2810906")
}

minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'runClient1'
            main 'net.minecraftforge.userdev.LaunchTesting'
            //property 'mixin.env.disableRefMap', 'true' //In case we have some (temporary) dependency on a mod using mixins.
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            workingDirectory project.file('run/client1').canonicalPath
            jvmArg '-ea:de.teamlapen...'
            arg "-mixin.config=vampirism.mixins.json"
            
            mods {
                vampirism {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.lib
                }
            }

        }
        client2 {
            parent runs.client
            taskName 'runClient2'
            arg '--username=Dev2'
            arg '-mixin.config=vampirism.mixins.json'

        }
        server {
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run/server').canonicalPath
            jvmArg '-ea:de.teamlapen...'
            arg "-mixin.config=vampirism.mixins.json"

            mods {
                vampirism {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.lib
                }


            }
        }
        data {
            workingDirectory project.file('run/data').canonicalPath
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=vampirism.mixins.json", '--mod', 'vampirism', '--all', '--output', file('src/generated/resources/'),  '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                vampirism {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.lib
                }
            }
        }
    }

}

task downloadCrowdin() {
    ext {
        output = file('build/crowdin_raw.zip')
        update = file('build/crowdin.json')
        id = 'vampirism'
    }
    outputs.upToDateWhen { false }
    onlyIf {
        project.hasProperty('VAMPIRISM_CROWDIN_KEY') && !project.gradle.startParameter.isOffline()
    }
    doLast {
        download {
            src "https://api.crowdin.com/api/project/${id}/export?key=${project.VAMPIRISM_CROWDIN_KEY}&export_translated_only&json"
            dest update
            overwrite true
        }
        if (!update.text.contains('success')) {
            throw new RuntimeException("Crowdin export failed, see ${update} for more info")
        }
        download {
            src "https://api.crowdin.com/api/project/${id}/download/all.zip?key=${project.VAMPIRISM_CROWDIN_KEY}"
            dest output
            overwrite true
        }
    }
}

task crowdin(type: Copy){
    dependsOn downloadCrowdin
    onlyIf {
        !downloadCrowdin.state.skipped
    }
    destinationDir = file('build/translations')
    from(zipTree(downloadCrowdin.output)){
        filter { String line ->
            line.indexOf("\"\"") != -1 ? null : line //Filter empty translations
        }
        filteringCharset = 'UTF-8'
        exclude { it.isDirectory() }
        rename { it.toLowerCase() }//Minecraft needs it lowercase.
        exclude '**/*.lang' //Pre-1.13 format
    }
}

processResources {

    filesMatching("**/mods.toml") {

        expand 'version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version, 'jei_version': jei_version, 'guideapi_version': guideapi_version
    }

    outputs.upToDateWhen { false }


    exclude '**/Thumbs.db'
}

processLibResources {
}




jar {
    dependsOn 'crowdin'

    //Keep the jar as clean as possible
    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.lib.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir
    from sourceSets.lib.output.resourcesDir
    
    from{
        fileTree('build/translations').matching{
            exclude "**/en_us.json" //Don't override local source file
        }
    }



    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "vampirism",
                "Specification-Vendor": "maxanier",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"maxanier",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "vampirism.mixins.json"
        ])
    }
}
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "vampirism.refmap.json"
}