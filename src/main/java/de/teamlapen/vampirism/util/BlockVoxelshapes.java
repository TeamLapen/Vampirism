package de.teamlapen.vampirism.util;

import net.minecraft.block.Block;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;

import java.util.stream.Stream;

/**
 * Store voxel shapes for blocks without dedicated classes
 */
public class BlockVoxelshapes {
    public static final VoxelShape grave_cage = Stream.of(
            Block.box(0, 0, 0, 2, 10, 2),
            Block.box(0, 0, 6, 2, 10, 8),
            Block.box(0, 0, 12, 2, 10, 14),
            Block.box(14, 0, 0, 16, 10, 2),
            Block.box(14, 0, 6, 16, 10, 8),
            Block.box(14, 0, 12, 16, 10, 14),
            Block.box(9, 0, 0, 11, 10, 2),
            Block.box(5, 0, 0, 7, 10, 2),
            Block.box(0, 10, 0, 16, 12, 2),
            Block.box(14, 10, 2, 16, 12, 16),
            Block.box(0, 10, 2, 2, 12, 16),
            Block.box(0, 4, 2, 2, 6, 6),
            Block.box(0, 4, 8, 2, 6, 12),
            Block.box(0, 4, 14, 2, 6, 16),
            Block.box(14, 4, 2, 16, 6, 6),
            Block.box(14, 4, 8, 16, 6, 12),
            Block.box(14, 4, 14, 16, 6, 16),
            Block.box(9, 10, 6, 14, 12, 8),
            Block.box(2, 10, 6, 7, 12, 8),
            Block.box(7, 10, 2, 9, 12, 16),
            Block.box(9, 10, 12, 14, 12, 14),
            Block.box(2, 10, 12, 7, 12, 14),
            Block.box(11, 4, 0, 14, 6, 2),
            Block.box(2, 4, 0, 5, 6, 2),
            Block.box(7, 4, 0, 9, 6, 2)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElseGet(VoxelShapes::empty);

    public static final VoxelShape tomb1 = Stream.of(
            Block.box(2, 0, 2, 14, 1, 7),
            Block.box(3, 1, 3, 13, 9, 6),
            Block.box(4, 9, 3, 12, 10, 6),
            Block.box(6, 10, 3, 10, 11, 6)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElseGet(VoxelShapes::empty);

    public static final VoxelShape tomb2 = Stream.of(
            Block.box(2, 0, 2, 14, 2, 7),
            Block.box(3, 2, 3, 13, 14, 6),
            Block.box(4, 14, 3, 12, 15, 6),
            Block.box(6, 15, 3, 10, 16, 6)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElseGet(VoxelShapes::empty);

    public static final VoxelShape tomb3 = Stream.of(
            Block.box(2, 0, 2, 14, 2, 10),
            Block.box(4, 2, 4, 12, 14, 8),
            Block.box(0, 14, 4, 16, 18, 8),
            Block.box(5, 18, 4, 11, 20, 8),
            Block.box(4, 20, 4, 12, 26, 8),
            Block.box(5, 26, 4, 11, 27, 8)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElseGet(VoxelShapes::empty);

    public static final VoxelShape vampire_rack = Stream.of(
            Block.box(3, 0, 0, 13, 15.55, 3.23)
//            Block.box(5.7182181566259285, -0.0011571834945509063, 0.008185183993054679, 10.318027520627503, 0.9188046893057633, 3.228051738794157),
//            Block.box(3.573750981914033, 2.500150478299289, 0.007265222120253156, 4.493712854714342, 13.539692951903064, 3.2289717006669587),
//            Block.box(-0.2988448564966184, 7.626714566533807, 0.008185183993054679, 0.6211170163037032, 14.066447676136015, 3.228051738794157),
//            Block.box(15.415128660949735, 7.626714566533807, 0.008185183993054679, 16.335090533750048, 14.066447676136015, 3.228051738794157),
//            Block.box(11.542532822539087, 2.500150478299289, 0.007265222120253156, 12.462494695339403, 13.539692951903064, 3.2289717006669587),
//            Block.box(3.9579473209847276, 15.227625898153427, 0.007265222120253156, 12.053611801627493, 16.147587770953734, 3.2289717006669587),
//            Block.box(5.7182181566259285, 0.9188046893057633, 0.4681661203932155, 10.318027520627503, 15.249231308632396, 0.928147056793371),
//            Block.box(4.7982562838256175, 2.298747498506234, 0.4681661203932155, 5.7182181566259285, 15.249231308632396, 0.928147056793371),
//            Block.box(3.8782944110252924, 4.598652180507022, 0.4681661203932155, 4.7982562838256175, 15.249231308632396, 0.928147056793371),
//            Block.box(2.9583325382249885, 6.898556862507809, 0.4681661203932155, 3.8782944110252924, 13.869288499431917, 0.928147056793371),
//            Block.box(2.4983516018248277, 8.278499671708282, 0.4681661203932155, 2.9583325382249885, 12.489345690231445, 0.928147056793371),
//            Block.box(10.318027520627503, 2.298747498506234, 0.4681661203932155, 11.23798939342782, 15.249231308632396, 0.928147056793371),
//            Block.box(11.23798939342782, 4.598652180507022, 0.4681661203932155, 12.157951266228133, 15.249231308632396, 0.928147056793371),
//            Block.box(12.157951266228133, 6.898556862507809, 0.4681661203932155, 13.077913139028446, 13.869288499431917, 0.928147056793371),
//            Block.box(13.077913139028446, 8.278499671708282, 0.4681661203932155, 13.537894075428605, 12.489345690231445, 0.928147056793371),
//            Block.box(4.33827534742546, 4.138671244106866, 0.928147056793371, 11.697970329827974, 4.598652180507022, 2.768070802394),
//            Block.box(2.9583325382249885, 8.278499671708282, 0.928147056793371, 13.077913139028446, 8.73848060810844, 2.768070802394),
//            Block.box(2.9583325382249885, 12.418328099309697, 0.928147056793371, 13.077913139028446, 12.878309035709858, 2.768070802394)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElse(VoxelShapes.empty());

    public static final VoxelShape throne = Stream.of(
            Block.box(4.126251859505507, 1.4176077997076106, 3.113125929752753, 6.226251859505506, 4.417607799707609, 5.113125929752753),
            Block.box(8.433688520599969, 3.265395312769293, 3.1111000000000004, 10.433688520599969, 5.265395312769291, 5.1151),
            Block.box(3.613125929752753, 5.500000000000002, 3.113125929752753, 5.613125929752753, 7.5, 5.113125929752753),
            Block.box(2.613125929752753, 7.5, 2.113125929752753, 14.613125929752753, 8.499999999999998, 14.113125929752753),
            Block.box(2.613125929752753, 8.5, 13.113125929752753, 14.613125929752753, 9.499999999999998, 14.113125929752753),
            Block.box(4.613125929752753, 8.5, 12.113125929752753, 12.613125929752753, 10.499999999999998, 13.113125929752753),
            Block.box(3.613125929752753, 9.5, 1.1131259297527532, 13.613125929752753, 26, 2.113125929752753),
            Block.box(15.186104639057817, 9.5, -8.684380603575654, 16.186104639057817, 26, -7.784380603575656),
            Block.box(1.9642792321098375, 9.5, -0.9062060105236327, 2.9642792321098375, 26, 0.0937939894763673),
            Block.box(3.613125929752753, 9.5, 2.113125929752753, 13.613125929752753, 25.5, 2.613125929752753),
            Block.box(2.613125929752753, 9.5, 2.113125929752753, 3.613125929752753, 28, 3.113125929752753),
            Block.box(13.613125929752753, 9.5, 2.113125929752753, 14.613125929752753, 28, 3.0131259297527535),
            Block.box(11.613125929752753, 5.500000000000002, 3.113125929752753, 13.613125929752753, 7.5, 5.113125929752753),
            Block.box(6.7925633389055395, 3.265395312769293, 3.1111000000000004, 8.79256333890554, 5.265395312769291, 5.1151),
            Block.box(10.900000000000002, 1.4176077997076106, 3.113125929752753, 13.000000000000002, 4.417607799707609, 5.113125929752753),
            Block.box(4.226251859505506, 1.4176077997076106, 11.113125929752753, 6.226251859505506, 4.417607799707609, 13.113125929752753),
            Block.box(8.433688520599969, 3.265395312769293, 11.11115185950551, 10.433688520599969, 5.265395312769291, 13.115151859505508),
            Block.box(3.613125929752753, 5.500000000000002, 11.113125929752753, 5.613125929752753, 7.5, 13.113125929752753),
            Block.box(10.900000000000002, 1.4176077997076106, 11.113125929752753, 13.000000000000002, 4.417607799707609, 13.113125929752753),
            Block.box(6.7925633389055395, 3.265395312769293, 11.11115185950551, 8.79256333890554, 5.265395312769291, 13.115151859505508),
            Block.box(11.613125929752753, 5.500000000000002, 11.113125929752753, 13.613125929752753, 7.5, 13.113125929752753),
            Block.box(14.027339492125845, 13.5, 3.5273394921258454, 16.027339492125847, 15.5, 13.427339492125846),
            Block.box(1.1989123673796573, 13.5, 3.5273394921258454, 3.198912367379659, 15.5, 13.527339492125845),
            Block.box(22.135852107363647, 13.5, -6.048341634254584, 24.135852107363647, 15.5, -4.648341634254585),
            Block.box(-6.909600247858142, 13.5, -6.048341634254584, -4.909600247858142, 15.5, -4.648341634254585),
            Block.box(2.613125929752753, 8.5, 3.113125929752753, 3.613125929752753, 9.499999999999998, 13.113125929752753),
            Block.box(13.613125929752753, 8.5, 3.113125929752753, 14.613125929752753, 9.499999999999998, 13.113125929752753),
            Block.box(3.613125929752753, 8.5, 10.113125929752753, 13.613125929752753, 10.499999999999998, 12.113125929752753),
            Block.box(10.613125929752753, 8.5, 6.113125929752753, 13.613125929752753, 10.499999999999998, 10.113125929752753),
            Block.box(3.613125929752753, 8.5, 4.113125929752753, 13.613125929752753, 10.499999999999998, 6.113125929752753),
            Block.box(3.613125929752753, 8.5, 6.113125929752753, 6.613125929752753, 10.499999999999998, 10.113125929752753),
            Block.box(4.613125929752753, 8.5, 3.113125929752753, 12.613125929752753, 10.499999999999998, 4.113125929752753)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).orElse(VoxelShapes.empty());
}
